// Generated by CoffeeScript 1.6.3
(function() {
  var T, every, isArray, isFunction, isInstanceOf, isObject, isType, option, _ref;

  option = require('./option');

  T = require('./t');

  _ref = require('./typecheck'), isArray = _ref.isArray, isObject = _ref.isObject, isInstanceOf = _ref.isInstanceOf, isFunction = _ref.isFunction;

  every = function(arr, f) {
    var item, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (!f(item)) {
        return false;
      }
    }
    return true;
  };

  isType = function(Type, val) {
    var ChildType, child_param, results;
    if (option.transparent) {
      return true;
    }
    if (isArray(Type)) {
      ChildType = Type[0];
      return every(val, function(item) {
        return isType(ChildType, item);
      });
    } else if (Type instanceof T.Func) {
      return isFunction(Type);
    } else if (Type instanceof T.ContextType) {
      return Type.validate(val);
    } else if (isObject(Type)) {
      results = (function() {
        var _results;
        _results = [];
        for (child_param in Type) {
          ChildType = Type[child_param];
          _results.push(isType(ChildType, val[child_param]));
        }
        return _results;
      })();
      return every(results, function(i) {
        return i === true;
      });
    } else if (isInstanceOf(Type, val)) {
      return true;
    }
    throw 'irregular type';
  };

  module.exports = isType;

}).call(this);
