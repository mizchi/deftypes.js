// Generated by CoffeeScript 1.6.3
(function() {
  var T, def, option, typecheck, wrapFunction,
    __slice = [].slice;

  T = require('./t');

  typecheck = require('./typecheck');

  option = require('./option');

  wrapFunction = function(Type, f, self) {
    if (self == null) {
      self = null;
    }
    return function() {
      var ArgType, args, i, ret, _i, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length !== Type.args.length) {
        throw new Error("mismatch: Arguments length");
      }
      for (i = _i = 0, _ref = Type.args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ArgType = Type.args[i];
        if (!typecheck.isStruct(ArgType, args[i])) {
          throw new Error("Argument Error");
        }
      }
      ret = f.apply(self, args);
      if (!typecheck.isStruct(Type.returns, ret)) {
        throw new Error("Return Type Error");
      }
      return ret;
    };
  };

  
function clone(obj) {
   var c = {};

   for (var i in obj) {
       var prop = obj[i];

       if (typeof prop == 'object') {
          if (prop instanceof Array) {
              c[i] = [];

              for (var j = 0; j < prop.length; j++) {
                  c[i].push(prop[j]);
              }
          } else {
              c[i] = clone(prop);
          }
       } else {
          c[i] = prop;
       }
   }

   return c;
}
;

  def = function(Type, instance, scope, func) {
    if (arguments.length === 3) {
      return def(Type, instance, [], scope);
    }
    if (arguments.length === 4) {
      if (option.transparent) {
        func.call(instance);
      } else {
        if (!typecheck.isStruct(Type, instance)) {
          throw new Error("invalid object before apply function");
        }
        func.call(instance);
        if (!typecheck.isStruct(Type, instance)) {
          throw new Error("invalid object before apply function");
        }
      }
    }
    if (option.transparent) {
      return instance;
    }
    if (typecheck.isFunction(instance)) {
      return wrapFunction(Type, instance);
    }
    if (typecheck.isStruct(Type, instance)) {
      return instance;
    } else {
      throw new Error("instance: " + instance + "\ntype: " + Type);
    }
  };

  module.exports = def;

}).call(this);
