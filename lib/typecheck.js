// Generated by CoffeeScript 1.6.3
(function() {
  var T, every, isArray, isArrayLike, isBoolean, isDate, isFunction, isInstanceOf, isNull, isNullable, isNumber, isObject, isObjectLike, isRegExp, isString, isType, isUndefined, option, toString;

  T = require('./types');

  option = require('./option');

  toString = function(val) {
    return Object.prototype.toString.call(val);
  };

  isString = function(val) {
    return toString(val) === '[object String]';
  };

  isNumber = function(val) {
    return toString(val) === '[object Number]' && !isNaN(val);
  };

  isBoolean = function(val) {
    return toString(val) === '[object Boolean]';
  };

  isFunction = function(val) {
    return toString(val) === '[object Function]';
  };

  isArray = function(val) {
    return toString(val) === '[object Array]';
  };

  isArrayLike = function(val) {
    return isArray(val) || (val && typeof val === 'object' && isNumber(val.length));
  };

  isObject = function(val) {
    return toString(val) === '[object Object]';
  };

  isObjectLike = function(val) {
    return val !== null && typeof val === 'object';
  };

  isRegExp = function(val) {
    return toString(val) === '[object RegExp]';
  };

  isDate = function(val) {
    return toString(val) === '[object Date]';
  };

  isNull = function(val) {
    return val === null;
  };

  isUndefined = function(val) {
    return val === void 0;
  };

  isNullable = function(val) {
    return val instanceof T.Nullable;
  };

  isInstanceOf = function(type, val) {
    switch (type) {
      case String:
        return isString(val);
      case Number:
        return isNumber(val);
      case Boolean:
        return isBoolean(val);
      default:
        return val instanceof type;
    }
  };

  every = function(arr, f) {
    var item, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (!f(item)) {
        return false;
      }
    }
    return true;
  };

  isType = function(type, val) {
    var child_param, child_type, results;
    if (option.transparent) {
      return true;
    }
    if (isArray(type)) {
      child_type = type[0];
      return every(val, function(item) {
        return isType(child_type, item);
      });
    } else if (type instanceof T.ContextType) {
      return type.validate(val);
    }
    if (type === Object) {
      return true;
    } else if (isObject(type)) {
      results = (function() {
        var _results;
        _results = [];
        for (child_param in type) {
          child_type = type[child_param];
          _results.push(isType(child_type, val[child_param]));
        }
        return _results;
      })();
      return every(results, function(i) {
        return i === true;
      });
    } else if (isInstanceOf(type, val)) {
      return true;
    }
    throw 'irregular type';
  };

  module.exports = {
    toString: toString,
    isString: isString,
    isNumber: isNumber,
    isBoolean: isBoolean,
    isFunction: isFunction,
    isArray: isArray,
    isArrayLike: isArrayLike,
    isObject: isObject,
    isObjectLike: isObjectLike,
    isRegExp: isRegExp,
    isDate: isDate,
    isNull: isNull,
    isUndefined: isUndefined,
    isType: isType
  };

}).call(this);
