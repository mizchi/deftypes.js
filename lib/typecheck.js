// Generated by CoffeeScript 1.6.3
(function() {
  var T, every, isArray, isArrayLike, isBoolean, isDate, isDomNode, isFunction, isNull, isNullable, isNumber, isObject, isObjectLike, isRegExp, isString, isStruct, isUndefined, option, toString;

  T = require('./t');

  option = require('./option');

  toString = function(val) {
    return Object.prototype.toString.call(val);
  };

  isString = function(val) {
    return toString(val) === '[object String]';
  };

  isNumber = function(val) {
    return toString(val) === '[object Number]' && !isNaN(val);
  };

  isBoolean = function(val) {
    return toString(val) === '[object Boolean]';
  };

  isFunction = function(val) {
    return toString(val) === '[object Function]';
  };

  isArray = function(val) {
    return toString(val) === '[object Array]';
  };

  isArrayLike = function(val) {
    return isArray(val) || (val && typeof val === 'object' && isNumber(val.length));
  };

  isObject = function(val) {
    return toString(val) === '[object Object]';
  };

  isObjectLike = function(val) {
    return val !== null && typeof val === 'object';
  };

  isRegExp = function(val) {
    return toString(val) === '[object RegExp]';
  };

  isDate = function(val) {
    return toString(val) === '[object Date]';
  };

  isDomNode = function(val) {
    return val && isString(val.nodeName) && isArrayLike(val.childNodes);
  };

  isNull = function(val) {
    return val === null;
  };

  isUndefined = function(val) {
    return val === void 0;
  };

  isNullable = function(val) {
    return val instanceof T.Nullable;
  };

  every = function(arr, f) {
    var item, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (!f(item)) {
        return false;
      }
    }
    return true;
  };

  isStruct = function(Struct, instance) {
    var ChildStruct, ChildType, child_param, results;
    if (option.transparent) {
      return true;
    }
    if (isArray(Struct)) {
      ChildStruct = Struct[0];
      return every(instance, function(item) {
        return isStruct(ChildStruct, item);
      });
    } else if (Struct instanceof T.Func) {
      return isFunction(Struct);
    } else if (isNullable(Struct)) {
      if (isNull(instance)) {
        return true;
      }
      return isStruct(Struct.type, instance);
    } else if (isObject(Struct)) {
      results = (function() {
        var _results;
        _results = [];
        for (child_param in Struct) {
          ChildType = Struct[child_param];
          _results.push(isStruct(ChildType, instance[child_param]));
        }
        return _results;
      })();
      return every(results, function(i) {
        return i === true;
      });
    } else {
      switch (Struct) {
        case String:
          return isString(instance);
        case Number:
          return isNumber(instance);
        case Boolean:
          return isBoolean(instance);
        default:
          return instance instanceof Struct;
      }
    }
  };

  module.exports = {
    toString: toString,
    isString: isString,
    isNumber: isNumber,
    isBoolean: isBoolean,
    isFunction: isFunction,
    isArray: isArray,
    isArrayLike: isArrayLike,
    isObject: isObject,
    isObjectLike: isObjectLike,
    isRegExp: isRegExp,
    isDate: isDate,
    isDomNode: isDomNode,
    isNull: isNull,
    isUndefined: isUndefined,
    isStruct: isStruct
  };

}).call(this);
